/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.7 */

#ifndef PB_MUSE2_MUSE_V2_PB_H_INCLUDED
#define PB_MUSE2_MUSE_V2_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _muse2_HeadLocations {
    /* All head locations http://www.bem.fi/book/13/13.htm#03 */
    muse2_HeadLocations_NZ = 1,
    muse2_HeadLocations_FP1 = 2,
    muse2_HeadLocations_FPZ = 3,
    muse2_HeadLocations_FP2 = 4,
    muse2_HeadLocations_AF7 = 5,
    muse2_HeadLocations_AF3 = 6,
    muse2_HeadLocations_AFZ = 7,
    muse2_HeadLocations_AF4 = 8,
    muse2_HeadLocations_AF8 = 9,
    muse2_HeadLocations_F9 = 10,
    muse2_HeadLocations_F7 = 11,
    muse2_HeadLocations_F5 = 12,
    muse2_HeadLocations_F3 = 13,
    muse2_HeadLocations_F1 = 14,
    muse2_HeadLocations_FZ = 15,
    muse2_HeadLocations_F2 = 16,
    muse2_HeadLocations_F4 = 17,
    muse2_HeadLocations_F6 = 18,
    muse2_HeadLocations_F8 = 19,
    muse2_HeadLocations_F10 = 20,
    muse2_HeadLocations_FT9 = 21,
    muse2_HeadLocations_FT7 = 22,
    muse2_HeadLocations_FC5 = 23,
    muse2_HeadLocations_FC3 = 24,
    muse2_HeadLocations_FC1 = 25,
    muse2_HeadLocations_FCZ = 26,
    muse2_HeadLocations_FC2 = 27,
    muse2_HeadLocations_FC4 = 28,
    muse2_HeadLocations_FC6 = 29,
    muse2_HeadLocations_FT8 = 30,
    muse2_HeadLocations_FT10 = 31,
    muse2_HeadLocations_A1 = 32,
    muse2_HeadLocations_T9 = 33,
    muse2_HeadLocations_T7 = 34,
    muse2_HeadLocations_C5 = 35,
    muse2_HeadLocations_C3 = 36,
    muse2_HeadLocations_C1 = 37,
    muse2_HeadLocations_CZ = 38,
    muse2_HeadLocations_C2 = 39,
    muse2_HeadLocations_C4 = 40,
    muse2_HeadLocations_C6 = 41,
    muse2_HeadLocations_T8 = 42,
    muse2_HeadLocations_T10 = 43,
    muse2_HeadLocations_A2 = 44,
    muse2_HeadLocations_TP9 = 45,
    muse2_HeadLocations_TP7 = 46,
    muse2_HeadLocations_CP5 = 47,
    muse2_HeadLocations_CP3 = 48,
    muse2_HeadLocations_CP1 = 49,
    muse2_HeadLocations_CPZ = 50,
    muse2_HeadLocations_CP2 = 51,
    muse2_HeadLocations_CP4 = 52,
    muse2_HeadLocations_CP6 = 53,
    muse2_HeadLocations_TP8 = 54,
    muse2_HeadLocations_TP10 = 55,
    muse2_HeadLocations_P9 = 56,
    muse2_HeadLocations_P7 = 57,
    muse2_HeadLocations_P5 = 58,
    muse2_HeadLocations_P3 = 59,
    muse2_HeadLocations_P1 = 60,
    muse2_HeadLocations_PZ = 61,
    muse2_HeadLocations_P2 = 62,
    muse2_HeadLocations_P4 = 63,
    muse2_HeadLocations_P6 = 64,
    muse2_HeadLocations_P8 = 65,
    muse2_HeadLocations_P10 = 66,
    muse2_HeadLocations_PO7 = 67,
    muse2_HeadLocations_PO3 = 68,
    muse2_HeadLocations_POZ = 69,
    muse2_HeadLocations_PO4 = 70,
    muse2_HeadLocations_PO8 = 71,
    muse2_HeadLocations_O1 = 72,
    muse2_HeadLocations_OZ = 73,
    muse2_HeadLocations_O2 = 74,
    muse2_HeadLocations_IZ = 75,
    muse2_HeadLocations_AUX1 = 76,
    muse2_HeadLocations_AUX2 = 77,
    muse2_HeadLocations_AUX3 = 78,
    muse2_HeadLocations_AUX4 = 79,
    muse2_HeadLocations_MUSE_LEFT_AUX = 80,
    muse2_HeadLocations_MUSE_RIGHT_AUX = 81
} muse2_HeadLocations;

typedef enum _muse2_EEGUnits {
    muse2_EEGUnits_EEG_MICROVOLTS = 1,
    muse2_EEGUnits_EEG_MUSE1_RAW = 2
} muse2_EEGUnits;

typedef enum _muse2_AccelerometerUnits {
    muse2_AccelerometerUnits_ACC_GFORCE = 1,
    muse2_AccelerometerUnits_ACC_MUSE1_RAW = 2
} muse2_AccelerometerUnits;

/* This allows us to identify the extension data type. */
typedef enum _muse2_Data_Datatype {
    muse2_Data_Datatype_EEG = 0,
    muse2_Data_Datatype_QUANT = 1,
    muse2_Data_Datatype_ACCEL = 2,
    muse2_Data_Datatype_BATTERY = 3,
    muse2_Data_Datatype_VERSION = 4,
    muse2_Data_Datatype_CONFIG = 5,
    muse2_Data_Datatype_ANNOTATION = 6,
    muse2_Data_Datatype_HISTOGRAM = 7,
    muse2_Data_Datatype_ALGVALUE = 8,
    muse2_Data_Datatype_DSP = 9,
    muse2_Data_Datatype_COMPUTING_DEVICE = 10,
    muse2_Data_Datatype_EEG_DROPPED = 11,
    muse2_Data_Datatype_ACC_DROPPED = 12,
    muse2_Data_Datatype_CALM_APP = 13,
    muse2_Data_Datatype_CALM_ALG = 14
} muse2_Data_Datatype;

typedef enum _muse2_Annotation_Format {
    muse2_Annotation_Format_PLAIN_STRING = 0,
    muse2_Annotation_Format_JSON = 1,
    muse2_Annotation_Format_OSC = 2
} muse2_Annotation_Format;

/* Struct definitions */
typedef struct _muse2_DataCollection {
    pb_callback_t collection;
} muse2_DataCollection;

typedef struct _muse2_Data {
    /* The time that this event occurred. The precision is down to microseconds. */
    double timestamp;
    muse2_Data_Datatype datatype;
    /* The config_id here maps to a Config message.
 This is the sensor configuration for this data.
 This id allows data from multiple devices to be recorded to a single file. */
    bool has_config_id;
    uint64_t config_id;
    pb_extension_t *extensions;
} muse2_Data;

typedef struct _muse2_EEG {
    pb_callback_t values;
    bool has_drl;
    float drl;
    bool has_ref;
    float ref;
} muse2_EEG;

/* Possible quantization values are 1, 2, 4, 8, 16, 32, 64, 128 */
typedef struct _muse2_Quantization {
    pb_callback_t values;
} muse2_Quantization;

/* Accelerometer values are stored as milli-G's */
typedef struct _muse2_Accelerometer {
    bool has_acc1;
    float acc1; /* forward_back */
    bool has_acc2;
    float acc2; /* up_down */
    bool has_acc3;
    float acc3; /* left_right */
} muse2_Accelerometer;

/* You can use this message to record application-level events. */
typedef struct _muse2_Annotation {
    /* This is additional data for the event, can be in any format specified 
 by the Format enum. */
    pb_callback_t event_data;
    /* This specifies the string format of event_data. */
    bool has_event_data_format;
    muse2_Annotation_Format event_data_format;
    /* This can be used to classify events, for example "blink" or "error". */
    pb_callback_t event_type;
    /* This can be used to pair events together or give them unique IDs. */
    pb_callback_t event_id;
    /* This can be used to indicate this is a sub-event of another event. */
    pb_callback_t parent_id;
} muse2_Annotation;

typedef struct _muse2_Battery {
    bool has_percent_remaining;
    uint32_t percent_remaining;
    bool has_battery_fuel_gauge_millivolts;
    uint32_t battery_fuel_gauge_millivolts;
    bool has_battery_adc_millivolts;
    uint32_t battery_adc_millivolts;
    bool has_temperature_celsius;
    int32_t temperature_celsius;
} muse2_Battery;

/* This indicates the version of the Muse that was used with this recording. */
typedef struct _muse2_Version {
    pb_callback_t hardware_version;
    pb_callback_t firmware_headset_version;
    pb_callback_t firmware_type;
    pb_callback_t firmware_bootloader_version;
    pb_callback_t build_number;
    pb_callback_t protocol_version;
} muse2_Version;

/* This indicates the configuration of a specific Muse specified by the config_id. */
typedef struct _muse2_Config {
    /* Global configuration */
    pb_callback_t mac_addr;
    pb_callback_t serial_number;
    pb_callback_t preset;
    /* Network protocol */
    bool has_compression_enabled;
    bool compression_enabled;
    /* EEG data */
    bool has_filters_enabled;
    bool filters_enabled;
    bool has_notch_frequency_hz;
    uint32_t notch_frequency_hz;
    bool has_eeg_sample_frequency_hz;
    uint32_t eeg_sample_frequency_hz;
    bool has_eeg_output_frequency_hz;
    uint32_t eeg_output_frequency_hz;
    bool has_eeg_samples_bitwidth;
    uint32_t eeg_samples_bitwidth;
    bool has_eeg_channel_count;
    uint32_t eeg_channel_count;
    pb_callback_t eeg_channel_layout; /* raw string, converted to eeg_locations */
    bool has_eeg_downsample;
    uint32_t eeg_downsample;
    bool has_eeg_units;
    muse2_EEGUnits eeg_units;
    pb_callback_t eeg_locations; /* derived from eeg_channel_layout */
    bool has_eeg_conversion_factor;
    float eeg_conversion_factor;
    bool has_afe_gain;
    float afe_gain; /* Analog Front End Gain */
    /* DRLREF data */
    bool has_drlref_data_enabled;
    bool drlref_data_enabled;
    bool has_drlref_conversion_factor;
    float drlref_conversion_factor;
    bool has_drlref_sample_frequency_hz;
    uint32_t drlref_sample_frequency_hz;
    /* Accelerometer data */
    bool has_acc_data_enabled;
    bool acc_data_enabled;
    bool has_acc_units;
    muse2_AccelerometerUnits acc_units;
    bool has_acc_conversion_factor;
    float acc_conversion_factor;
    bool has_acc_sample_frequency_hz;
    uint32_t acc_sample_frequency_hz;
    /* Battery data */
    bool has_battery_data_enabled;
    bool battery_data_enabled;
    bool has_battery_percent_remaining;
    uint32_t battery_percent_remaining; /* This is a bootstrap value since battery info is only emitted every few seconds */
    bool has_battery_millivolts;
    uint32_t battery_millivolts; /* This is a bootstrap value since battery info is only emitted every few seconds */
    /* Error data (hardware/firmware level errors) */
    bool has_error_data_enabled;
    bool error_data_enabled;
} muse2_Config;

typedef struct _muse2_EEG_DroppedSamples {
    bool has_num;
    uint32_t num;
} muse2_EEG_DroppedSamples;

typedef struct _muse2_ACC_DroppedSamples {
    bool has_num;
    uint32_t num;
} muse2_ACC_DroppedSamples;

typedef struct _muse2_ComputingDevice {
    pb_callback_t os_type; /* e.g. "Android", "iOS", "OSX" */
    pb_callback_t os_version; /* e.g. "1.0.9", "7.0.3", "6.1.3" */
    pb_callback_t hardware_model_name; /* conventional name: "Samsung Galaxy Note 3", "Macbook Pro" */
    pb_callback_t hardware_model_id; /* unique model name: "SM-N900W8", "MacBookPro10,1" */
    pb_callback_t processor_name; /* this includes instruction set */
    pb_callback_t processor_speed; /* e.g. "1000MHz" */
    bool has_number_of_processors;
    uint32_t number_of_processors; /* e.g. 2, 4, 6 */
    pb_callback_t memory_size; /* e.g. “500MB” */
    pb_callback_t bluetooth_version; /* e.g."2.1 + EDR", "4.0" */
    pb_callback_t time_zone; /* e.g. "EST", "PDT" */
    bool has_time_zone_offset_seconds;
    int32_t time_zone_offset_seconds; /* e.g. -14000, 7200 */
} muse2_ComputingDevice;

typedef struct _muse2_DSP {
    pb_callback_t type;
    pb_callback_t float_array;
    pb_callback_t int_array;
    pb_callback_t version;
} muse2_DSP;


/* Extensions */
extern const pb_extension_type_t muse2_EEG_data; /* field type: muse2_EEG data; */
extern const pb_extension_type_t muse2_Quantization_data; /* field type: muse2_Quantization data; */
extern const pb_extension_type_t muse2_Accelerometer_data; /* field type: muse2_Accelerometer data; */
extern const pb_extension_type_t muse2_Annotation_data; /* field type: muse2_Annotation data; */
extern const pb_extension_type_t muse2_Battery_data; /* field type: muse2_Battery data; */
extern const pb_extension_type_t muse2_Version_data; /* field type: muse2_Version data; */
extern const pb_extension_type_t muse2_Config_data; /* field type: muse2_Config data; */
extern const pb_extension_type_t muse2_EEG_DroppedSamples_data; /* field type: muse2_EEG_DroppedSamples data; */
extern const pb_extension_type_t muse2_ACC_DroppedSamples_data; /* field type: muse2_ACC_DroppedSamples data; */
extern const pb_extension_type_t muse2_ComputingDevice_data; /* field type: muse2_ComputingDevice data; */
extern const pb_extension_type_t muse2_DSP_data; /* field type: muse2_DSP data; */

#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _muse2_HeadLocations_MIN muse2_HeadLocations_NZ
#define _muse2_HeadLocations_MAX muse2_HeadLocations_MUSE_RIGHT_AUX
#define _muse2_HeadLocations_ARRAYSIZE ((muse2_HeadLocations)(muse2_HeadLocations_MUSE_RIGHT_AUX+1))

#define _muse2_EEGUnits_MIN muse2_EEGUnits_EEG_MICROVOLTS
#define _muse2_EEGUnits_MAX muse2_EEGUnits_EEG_MUSE1_RAW
#define _muse2_EEGUnits_ARRAYSIZE ((muse2_EEGUnits)(muse2_EEGUnits_EEG_MUSE1_RAW+1))

#define _muse2_AccelerometerUnits_MIN muse2_AccelerometerUnits_ACC_GFORCE
#define _muse2_AccelerometerUnits_MAX muse2_AccelerometerUnits_ACC_MUSE1_RAW
#define _muse2_AccelerometerUnits_ARRAYSIZE ((muse2_AccelerometerUnits)(muse2_AccelerometerUnits_ACC_MUSE1_RAW+1))

#define _muse2_Data_Datatype_MIN muse2_Data_Datatype_EEG
#define _muse2_Data_Datatype_MAX muse2_Data_Datatype_CALM_ALG
#define _muse2_Data_Datatype_ARRAYSIZE ((muse2_Data_Datatype)(muse2_Data_Datatype_CALM_ALG+1))

#define _muse2_Annotation_Format_MIN muse2_Annotation_Format_PLAIN_STRING
#define _muse2_Annotation_Format_MAX muse2_Annotation_Format_OSC
#define _muse2_Annotation_Format_ARRAYSIZE ((muse2_Annotation_Format)(muse2_Annotation_Format_OSC+1))


#define muse2_Data_datatype_ENUMTYPE muse2_Data_Datatype




#define muse2_Annotation_event_data_format_ENUMTYPE muse2_Annotation_Format



#define muse2_Config_eeg_units_ENUMTYPE muse2_EEGUnits
#define muse2_Config_eeg_locations_ENUMTYPE muse2_HeadLocations
#define muse2_Config_acc_units_ENUMTYPE muse2_AccelerometerUnits






/* Initializer values for message structs */
#define muse2_DataCollection_init_default        {{{NULL}, NULL}}
#define muse2_Data_init_default                  {0, _muse2_Data_Datatype_MIN, false, 0, NULL}
#define muse2_EEG_init_default                   {{{NULL}, NULL}, false, 0, false, 0}
#define muse2_Quantization_init_default          {{{NULL}, NULL}}
#define muse2_Accelerometer_init_default         {false, 0, false, 0, false, 0}
#define muse2_Annotation_init_default            {{{NULL}, NULL}, false, muse2_Annotation_Format_PLAIN_STRING, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define muse2_Battery_init_default               {false, 0, false, 0, false, 0, false, 0}
#define muse2_Version_init_default               {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define muse2_Config_init_default                {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, _muse2_EEGUnits_MIN, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, _muse2_AccelerometerUnits_MIN, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define muse2_EEG_DroppedSamples_init_default    {false, 0}
#define muse2_ACC_DroppedSamples_init_default    {false, 0}
#define muse2_ComputingDevice_init_default       {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0}
#define muse2_DSP_init_default                   {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define muse2_DataCollection_init_zero           {{{NULL}, NULL}}
#define muse2_Data_init_zero                     {0, _muse2_Data_Datatype_MIN, false, 0, NULL}
#define muse2_EEG_init_zero                      {{{NULL}, NULL}, false, 0, false, 0}
#define muse2_Quantization_init_zero             {{{NULL}, NULL}}
#define muse2_Accelerometer_init_zero            {false, 0, false, 0, false, 0}
#define muse2_Annotation_init_zero               {{{NULL}, NULL}, false, _muse2_Annotation_Format_MIN, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define muse2_Battery_init_zero                  {false, 0, false, 0, false, 0, false, 0}
#define muse2_Version_init_zero                  {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define muse2_Config_init_zero                   {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, _muse2_EEGUnits_MIN, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, _muse2_AccelerometerUnits_MIN, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define muse2_EEG_DroppedSamples_init_zero       {false, 0}
#define muse2_ACC_DroppedSamples_init_zero       {false, 0}
#define muse2_ComputingDevice_init_zero          {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0}
#define muse2_DSP_init_zero                      {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define muse2_DataCollection_collection_tag      1
#define muse2_Data_timestamp_tag                 1
#define muse2_Data_datatype_tag                  2
#define muse2_Data_config_id_tag                 3
#define muse2_EEG_values_tag                     2
#define muse2_EEG_drl_tag                        5
#define muse2_EEG_ref_tag                        6
#define muse2_Quantization_values_tag            1
#define muse2_Accelerometer_acc1_tag             1
#define muse2_Accelerometer_acc2_tag             2
#define muse2_Accelerometer_acc3_tag             3
#define muse2_Annotation_event_data_tag          1
#define muse2_Annotation_event_data_format_tag   2
#define muse2_Annotation_event_type_tag          3
#define muse2_Annotation_event_id_tag            4
#define muse2_Annotation_parent_id_tag           5
#define muse2_Battery_percent_remaining_tag      1
#define muse2_Battery_battery_fuel_gauge_millivolts_tag 2
#define muse2_Battery_battery_adc_millivolts_tag 3
#define muse2_Battery_temperature_celsius_tag    4
#define muse2_Version_hardware_version_tag       1
#define muse2_Version_firmware_headset_version_tag 2
#define muse2_Version_firmware_type_tag          3
#define muse2_Version_firmware_bootloader_version_tag 4
#define muse2_Version_build_number_tag           5
#define muse2_Version_protocol_version_tag       6
#define muse2_Config_mac_addr_tag                1
#define muse2_Config_serial_number_tag           2
#define muse2_Config_preset_tag                  3
#define muse2_Config_compression_enabled_tag     100
#define muse2_Config_filters_enabled_tag         201
#define muse2_Config_notch_frequency_hz_tag      202
#define muse2_Config_eeg_sample_frequency_hz_tag 203
#define muse2_Config_eeg_output_frequency_hz_tag 204
#define muse2_Config_eeg_samples_bitwidth_tag    205
#define muse2_Config_eeg_channel_count_tag       206
#define muse2_Config_eeg_channel_layout_tag      207
#define muse2_Config_eeg_downsample_tag          208
#define muse2_Config_eeg_units_tag               209
#define muse2_Config_eeg_locations_tag           210
#define muse2_Config_eeg_conversion_factor_tag   211
#define muse2_Config_afe_gain_tag                212
#define muse2_Config_drlref_data_enabled_tag     300
#define muse2_Config_drlref_conversion_factor_tag 301
#define muse2_Config_drlref_sample_frequency_hz_tag 302
#define muse2_Config_acc_data_enabled_tag        400
#define muse2_Config_acc_units_tag               401
#define muse2_Config_acc_conversion_factor_tag   402
#define muse2_Config_acc_sample_frequency_hz_tag 403
#define muse2_Config_battery_data_enabled_tag    500
#define muse2_Config_battery_percent_remaining_tag 501
#define muse2_Config_battery_millivolts_tag      502
#define muse2_Config_error_data_enabled_tag      600
#define muse2_EEG_DroppedSamples_num_tag         1
#define muse2_ACC_DroppedSamples_num_tag         1
#define muse2_ComputingDevice_os_type_tag        1
#define muse2_ComputingDevice_os_version_tag     2
#define muse2_ComputingDevice_hardware_model_name_tag 3
#define muse2_ComputingDevice_hardware_model_id_tag 4
#define muse2_ComputingDevice_processor_name_tag 5
#define muse2_ComputingDevice_processor_speed_tag 6
#define muse2_ComputingDevice_number_of_processors_tag 7
#define muse2_ComputingDevice_memory_size_tag    8
#define muse2_ComputingDevice_bluetooth_version_tag 9
#define muse2_ComputingDevice_time_zone_tag      10
#define muse2_ComputingDevice_time_zone_offset_seconds_tag 11
#define muse2_DSP_type_tag                       1
#define muse2_DSP_float_array_tag                2
#define muse2_DSP_int_array_tag                  3
#define muse2_DSP_version_tag                    4
#define muse2_EEG_data_tag                       8
#define muse2_Quantization_data_tag              9
#define muse2_Accelerometer_data_tag             10
#define muse2_Annotation_data_tag                100
#define muse2_Battery_data_tag                   101
#define muse2_Version_data_tag                   102
#define muse2_Config_data_tag                    103
#define muse2_EEG_DroppedSamples_data_tag        202
#define muse2_ACC_DroppedSamples_data_tag        203
#define muse2_ComputingDevice_data_tag           201
#define muse2_DSP_data_tag                       200

/* Struct field encoding specification for nanopb */
#define muse2_DataCollection_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  collection,        1)
#define muse2_DataCollection_CALLBACK pb_default_field_callback
#define muse2_DataCollection_DEFAULT NULL
#define muse2_DataCollection_collection_MSGTYPE muse2_Data

#define muse2_Data_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, DOUBLE,   timestamp,         1) \
X(a, STATIC,   REQUIRED, UENUM,    datatype,          2) \
X(a, STATIC,   OPTIONAL, UINT64,   config_id,         3) \
X(a, CALLBACK, OPTIONAL, EXTENSION, extensions,        8)
#define muse2_Data_CALLBACK pb_default_field_callback
#define muse2_Data_DEFAULT NULL

#define muse2_EEG_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, FLOAT,    values,            2) \
X(a, STATIC,   OPTIONAL, FLOAT,    drl,               5) \
X(a, STATIC,   OPTIONAL, FLOAT,    ref,               6)
#define muse2_EEG_CALLBACK pb_default_field_callback
#define muse2_EEG_DEFAULT NULL

#define muse2_Quantization_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, UINT32,   values,            1)
#define muse2_Quantization_CALLBACK pb_default_field_callback
#define muse2_Quantization_DEFAULT NULL

#define muse2_Accelerometer_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, FLOAT,    acc1,              1) \
X(a, STATIC,   OPTIONAL, FLOAT,    acc2,              2) \
X(a, STATIC,   OPTIONAL, FLOAT,    acc3,              3)
#define muse2_Accelerometer_CALLBACK NULL
#define muse2_Accelerometer_DEFAULT NULL

#define muse2_Annotation_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   event_data,        1) \
X(a, STATIC,   OPTIONAL, UENUM,    event_data_format,   2) \
X(a, CALLBACK, OPTIONAL, STRING,   event_type,        3) \
X(a, CALLBACK, OPTIONAL, STRING,   event_id,          4) \
X(a, CALLBACK, OPTIONAL, STRING,   parent_id,         5)
#define muse2_Annotation_CALLBACK pb_default_field_callback
#define muse2_Annotation_DEFAULT NULL

#define muse2_Battery_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   percent_remaining,   1) \
X(a, STATIC,   OPTIONAL, UINT32,   battery_fuel_gauge_millivolts,   2) \
X(a, STATIC,   OPTIONAL, UINT32,   battery_adc_millivolts,   3) \
X(a, STATIC,   OPTIONAL, SINT32,   temperature_celsius,   4)
#define muse2_Battery_CALLBACK NULL
#define muse2_Battery_DEFAULT NULL

#define muse2_Version_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   hardware_version,   1) \
X(a, CALLBACK, OPTIONAL, STRING,   firmware_headset_version,   2) \
X(a, CALLBACK, OPTIONAL, STRING,   firmware_type,     3) \
X(a, CALLBACK, OPTIONAL, STRING,   firmware_bootloader_version,   4) \
X(a, CALLBACK, OPTIONAL, STRING,   build_number,      5) \
X(a, CALLBACK, OPTIONAL, STRING,   protocol_version,   6)
#define muse2_Version_CALLBACK pb_default_field_callback
#define muse2_Version_DEFAULT NULL

#define muse2_Config_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   mac_addr,          1) \
X(a, CALLBACK, OPTIONAL, STRING,   serial_number,     2) \
X(a, CALLBACK, OPTIONAL, STRING,   preset,            3) \
X(a, STATIC,   OPTIONAL, BOOL,     compression_enabled, 100) \
X(a, STATIC,   OPTIONAL, BOOL,     filters_enabled, 201) \
X(a, STATIC,   OPTIONAL, UINT32,   notch_frequency_hz, 202) \
X(a, STATIC,   OPTIONAL, UINT32,   eeg_sample_frequency_hz, 203) \
X(a, STATIC,   OPTIONAL, UINT32,   eeg_output_frequency_hz, 204) \
X(a, STATIC,   OPTIONAL, UINT32,   eeg_samples_bitwidth, 205) \
X(a, STATIC,   OPTIONAL, UINT32,   eeg_channel_count, 206) \
X(a, CALLBACK, OPTIONAL, STRING,   eeg_channel_layout, 207) \
X(a, STATIC,   OPTIONAL, UINT32,   eeg_downsample,  208) \
X(a, STATIC,   OPTIONAL, UENUM,    eeg_units,       209) \
X(a, CALLBACK, REPEATED, UENUM,    eeg_locations,   210) \
X(a, STATIC,   OPTIONAL, FLOAT,    eeg_conversion_factor, 211) \
X(a, STATIC,   OPTIONAL, FLOAT,    afe_gain,        212) \
X(a, STATIC,   OPTIONAL, BOOL,     drlref_data_enabled, 300) \
X(a, STATIC,   OPTIONAL, FLOAT,    drlref_conversion_factor, 301) \
X(a, STATIC,   OPTIONAL, UINT32,   drlref_sample_frequency_hz, 302) \
X(a, STATIC,   OPTIONAL, BOOL,     acc_data_enabled, 400) \
X(a, STATIC,   OPTIONAL, UENUM,    acc_units,       401) \
X(a, STATIC,   OPTIONAL, FLOAT,    acc_conversion_factor, 402) \
X(a, STATIC,   OPTIONAL, UINT32,   acc_sample_frequency_hz, 403) \
X(a, STATIC,   OPTIONAL, BOOL,     battery_data_enabled, 500) \
X(a, STATIC,   OPTIONAL, UINT32,   battery_percent_remaining, 501) \
X(a, STATIC,   OPTIONAL, UINT32,   battery_millivolts, 502) \
X(a, STATIC,   OPTIONAL, BOOL,     error_data_enabled, 600)
#define muse2_Config_CALLBACK pb_default_field_callback
#define muse2_Config_DEFAULT (const pb_byte_t*)"\x88\x0d\x01\x88\x19\x01\x00"

#define muse2_EEG_DroppedSamples_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   num,               1)
#define muse2_EEG_DroppedSamples_CALLBACK NULL
#define muse2_EEG_DroppedSamples_DEFAULT NULL

#define muse2_ACC_DroppedSamples_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   num,               1)
#define muse2_ACC_DroppedSamples_CALLBACK NULL
#define muse2_ACC_DroppedSamples_DEFAULT NULL

#define muse2_ComputingDevice_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   os_type,           1) \
X(a, CALLBACK, OPTIONAL, STRING,   os_version,        2) \
X(a, CALLBACK, OPTIONAL, STRING,   hardware_model_name,   3) \
X(a, CALLBACK, OPTIONAL, STRING,   hardware_model_id,   4) \
X(a, CALLBACK, OPTIONAL, STRING,   processor_name,    5) \
X(a, CALLBACK, OPTIONAL, STRING,   processor_speed,   6) \
X(a, STATIC,   OPTIONAL, UINT32,   number_of_processors,   7) \
X(a, CALLBACK, OPTIONAL, STRING,   memory_size,       8) \
X(a, CALLBACK, OPTIONAL, STRING,   bluetooth_version,   9) \
X(a, CALLBACK, OPTIONAL, STRING,   time_zone,        10) \
X(a, STATIC,   OPTIONAL, SINT32,   time_zone_offset_seconds,  11)
#define muse2_ComputingDevice_CALLBACK pb_default_field_callback
#define muse2_ComputingDevice_DEFAULT NULL

#define muse2_DSP_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   type,              1) \
X(a, CALLBACK, REPEATED, FLOAT,    float_array,       2) \
X(a, CALLBACK, REPEATED, UINT32,   int_array,         3) \
X(a, CALLBACK, OPTIONAL, STRING,   version,           4)
#define muse2_DSP_CALLBACK pb_default_field_callback
#define muse2_DSP_DEFAULT NULL

extern const pb_msgdesc_t muse2_DataCollection_msg;
extern const pb_msgdesc_t muse2_Data_msg;
extern const pb_msgdesc_t muse2_EEG_msg;
extern const pb_msgdesc_t muse2_Quantization_msg;
extern const pb_msgdesc_t muse2_Accelerometer_msg;
extern const pb_msgdesc_t muse2_Annotation_msg;
extern const pb_msgdesc_t muse2_Battery_msg;
extern const pb_msgdesc_t muse2_Version_msg;
extern const pb_msgdesc_t muse2_Config_msg;
extern const pb_msgdesc_t muse2_EEG_DroppedSamples_msg;
extern const pb_msgdesc_t muse2_ACC_DroppedSamples_msg;
extern const pb_msgdesc_t muse2_ComputingDevice_msg;
extern const pb_msgdesc_t muse2_DSP_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define muse2_DataCollection_fields &muse2_DataCollection_msg
#define muse2_Data_fields &muse2_Data_msg
#define muse2_EEG_fields &muse2_EEG_msg
#define muse2_Quantization_fields &muse2_Quantization_msg
#define muse2_Accelerometer_fields &muse2_Accelerometer_msg
#define muse2_Annotation_fields &muse2_Annotation_msg
#define muse2_Battery_fields &muse2_Battery_msg
#define muse2_Version_fields &muse2_Version_msg
#define muse2_Config_fields &muse2_Config_msg
#define muse2_EEG_DroppedSamples_fields &muse2_EEG_DroppedSamples_msg
#define muse2_ACC_DroppedSamples_fields &muse2_ACC_DroppedSamples_msg
#define muse2_ComputingDevice_fields &muse2_ComputingDevice_msg
#define muse2_DSP_fields &muse2_DSP_msg

/* Maximum encoded size of messages (where known) */
/* muse2_DataCollection_size depends on runtime parameters */
/* muse2_EEG_size depends on runtime parameters */
/* muse2_Quantization_size depends on runtime parameters */
/* muse2_Annotation_size depends on runtime parameters */
/* muse2_Version_size depends on runtime parameters */
/* muse2_Config_size depends on runtime parameters */
/* muse2_ComputingDevice_size depends on runtime parameters */
/* muse2_DSP_size depends on runtime parameters */
#define muse2_ACC_DroppedSamples_size            6
#define muse2_Accelerometer_size                 15
#define muse2_Battery_size                       24
#define muse2_Data_size                          22
#define muse2_EEG_DroppedSamples_size            6

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
