/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.5 */

#ifndef PB_MUSE1_MUSE_V1_PB_H_INCLUDED
#define PB_MUSE1_MUSE_V1_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _muse1_Data_Datatype { 
    muse1_Data_Datatype_EEG = 0, 
    muse1_Data_Datatype_QUANT = 1, 
    muse1_Data_Datatype_ACCEL = 2, 
    muse1_Data_Datatype_BATTERY = 3, 
    muse1_Data_Datatype_VERSION = 4, 
    muse1_Data_Datatype_CONFIG = 5, 
    muse1_Data_Datatype_ANNOTATION = 6, 
    muse1_Data_Datatype_HISTOGRAM = 7, 
    muse1_Data_Datatype_ALGVALUE = 8 
} muse1_Data_Datatype;

typedef enum _muse1_Annotation_Format { 
    muse1_Annotation_Format_PLAIN_STRING = 0, 
    muse1_Annotation_Format_JSON = 1 
} muse1_Annotation_Format;

/* Struct definitions */
typedef struct _muse1_DataCollection { 
    pb_callback_t collection; 
} muse1_DataCollection;

/* This indicates the version of the Muse that was used with this recording. */
typedef struct _muse1_Version { 
    pb_callback_t hardware_version; 
    pb_callback_t firmware_headset_version; 
    pb_callback_t firmware_type; 
    pb_callback_t firmware_bootloader_version; 
    pb_callback_t build_number; 
    pb_callback_t protocol_version; 
} muse1_Version;

/* Accelerometer values are stored as milli-G's */
typedef struct _muse1_Accelerometer { 
    bool has_acc1;
    int32_t acc1; /* forward_back */
    bool has_acc2;
    int32_t acc2; /* up_down */
    bool has_acc3;
    int32_t acc3; /* left_right */
} muse1_Accelerometer;

/* You can use this message to record application-level events. */
typedef struct _muse1_Annotation { 
    /* This is additional data for the event, can be in any format specified 
 by the Format enum. */
    pb_callback_t event_data; 
    /* This specifies the string format of event_data. */
    bool has_event_data_format;
    muse1_Annotation_Format event_data_format; 
    /* This can be used to classify events, for example "blink" or "error". */
    pb_callback_t event_type; 
    /* This can be used to pair events together or give them unique IDs. */
    pb_callback_t event_id; 
    /* This can be used to indicate this is a sub-event of another event. */
    pb_callback_t parent_id; 
} muse1_Annotation;

typedef struct _muse1_Battery { 
    bool has_percent_remaining;
    uint32_t percent_remaining; 
    bool has_battery_fuel_gauge_millivolts;
    uint32_t battery_fuel_gauge_millivolts; 
    bool has_battery_adc_millivolts;
    uint32_t battery_adc_millivolts; 
    bool has_temperature_celsius;
    int32_t temperature_celsius; 
} muse1_Battery;

/* This indicates the configuration of a specific Muse specified by the config_id. */
typedef struct _muse1_Config { 
    /* Global configuration */
    pb_callback_t preset; 
    bool has_filters_enabled;
    bool filters_enabled; 
    bool has_notch_frequency_hz;
    uint32_t notch_frequency_hz; 
    bool has_accelerometer_data_enabled;
    bool accelerometer_data_enabled; 
    bool has_battery_data_enabled;
    bool battery_data_enabled; 
    bool has_error_data_enabled;
    bool error_data_enabled; 
    /* Network protocol */
    bool has_compression_enabled;
    bool compression_enabled; 
    /* EEG data */
    bool has_eeg_sample_frequency_hz;
    uint32_t eeg_sample_frequency_hz; 
    bool has_eeg_output_frequency_hz;
    uint32_t eeg_output_frequency_hz; 
    bool has_eeg_samples_bitwidth;
    uint32_t eeg_samples_bitwidth; 
    bool has_eeg_channel_count;
    uint32_t eeg_channel_count; 
    pb_callback_t eeg_channel_layout; /* raw string, converted to eeg_locations */
    bool has_downsampling;
    uint32_t downsampling; 
    pb_callback_t output_mode; 
    /* Battery data */
    bool has_battery_percent_remaining;
    uint32_t battery_percent_remaining; /* This is a bootstrap value since battery info is only emitted every few seconds */
    bool has_battery_millivolts;
    uint32_t battery_millivolts; /* This is a bootstrap value since battery info is only emitted every few seconds */
    /* Additional */
    bool has_afe_gain;
    float afe_gain; /* gain of the eeg analog front end to calculate actual voltage level */
    pb_callback_t mac_addr; 
} muse1_Config;

typedef struct _muse1_Data { 
    /* The time that this event occurred. The precision is down to microseconds. */
    double timestamp; 
    muse1_Data_Datatype datatype; 
    pb_extension_t *extensions; 
} muse1_Data;

typedef struct _muse1_EEG { 
    bool has_left_aux;
    int32_t left_aux; 
    bool has_left_ear;
    int32_t left_ear; 
    bool has_left_forehead;
    int32_t left_forehead; 
    bool has_right_forehead;
    int32_t right_forehead; 
    bool has_right_ear;
    int32_t right_ear; 
    bool has_right_aux;
    int32_t right_aux; 
    bool has_ref;
    int32_t ref; 
    bool has_drl;
    int32_t drl; 
} muse1_EEG;

/* Possible quantization values are 1, 2, 4, 8, 16, 32, 64, 128 */
typedef struct _muse1_Quantization { 
    bool has_left_aux;
    uint32_t left_aux; 
    bool has_left_ear;
    uint32_t left_ear; 
    bool has_left_forehead;
    uint32_t left_forehead; 
    bool has_right_forehead;
    uint32_t right_forehead; 
    bool has_right_ear;
    uint32_t right_ear; 
    bool has_right_aux;
    uint32_t right_aux; 
} muse1_Quantization;


/* Extensions */
extern const pb_extension_type_t muse1_EEG_data; /* field type: muse1_EEG data; */
extern const pb_extension_type_t muse1_Quantization_data; /* field type: muse1_Quantization data; */
extern const pb_extension_type_t muse1_Accelerometer_data; /* field type: muse1_Accelerometer data; */
extern const pb_extension_type_t muse1_Annotation_data; /* field type: muse1_Annotation data; */
extern const pb_extension_type_t muse1_Battery_data; /* field type: muse1_Battery data; */
extern const pb_extension_type_t muse1_Version_data; /* field type: muse1_Version data; */
extern const pb_extension_type_t muse1_Config_data; /* field type: muse1_Config data; */

/* Helper constants for enums */
#define _muse1_Data_Datatype_MIN muse1_Data_Datatype_EEG
#define _muse1_Data_Datatype_MAX muse1_Data_Datatype_ALGVALUE
#define _muse1_Data_Datatype_ARRAYSIZE ((muse1_Data_Datatype)(muse1_Data_Datatype_ALGVALUE+1))

#define _muse1_Annotation_Format_MIN muse1_Annotation_Format_PLAIN_STRING
#define _muse1_Annotation_Format_MAX muse1_Annotation_Format_JSON
#define _muse1_Annotation_Format_ARRAYSIZE ((muse1_Annotation_Format)(muse1_Annotation_Format_JSON+1))


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define muse1_DataCollection_init_default        {{{NULL}, NULL}}
#define muse1_Data_init_default                  {0, _muse1_Data_Datatype_MIN, NULL}
#define muse1_EEG_init_default                   {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define muse1_Quantization_init_default          {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define muse1_Accelerometer_init_default         {false, 0, false, 0, false, 0}
#define muse1_Annotation_init_default            {{{NULL}, NULL}, false, muse1_Annotation_Format_PLAIN_STRING, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define muse1_Battery_init_default               {false, 0, false, 0, false, 0, false, 0}
#define muse1_Version_init_default               {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define muse1_Config_init_default                {{{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, {{NULL}, NULL}}
#define muse1_DataCollection_init_zero           {{{NULL}, NULL}}
#define muse1_Data_init_zero                     {0, _muse1_Data_Datatype_MIN, NULL}
#define muse1_EEG_init_zero                      {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define muse1_Quantization_init_zero             {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define muse1_Accelerometer_init_zero            {false, 0, false, 0, false, 0}
#define muse1_Annotation_init_zero               {{{NULL}, NULL}, false, _muse1_Annotation_Format_MIN, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define muse1_Battery_init_zero                  {false, 0, false, 0, false, 0, false, 0}
#define muse1_Version_init_zero                  {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define muse1_Config_init_zero                   {{{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, {{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define muse1_DataCollection_collection_tag      1
#define muse1_Version_hardware_version_tag       1
#define muse1_Version_firmware_headset_version_tag 2
#define muse1_Version_firmware_type_tag          3
#define muse1_Version_firmware_bootloader_version_tag 4
#define muse1_Version_build_number_tag           5
#define muse1_Version_protocol_version_tag       6
#define muse1_Accelerometer_acc1_tag             1
#define muse1_Accelerometer_acc2_tag             2
#define muse1_Accelerometer_acc3_tag             3
#define muse1_Annotation_event_data_tag          1
#define muse1_Annotation_event_data_format_tag   2
#define muse1_Annotation_event_type_tag          3
#define muse1_Annotation_event_id_tag            4
#define muse1_Annotation_parent_id_tag           5
#define muse1_Battery_percent_remaining_tag      1
#define muse1_Battery_battery_fuel_gauge_millivolts_tag 2
#define muse1_Battery_battery_adc_millivolts_tag 3
#define muse1_Battery_temperature_celsius_tag    4
#define muse1_Config_preset_tag                  1
#define muse1_Config_filters_enabled_tag         2
#define muse1_Config_notch_frequency_hz_tag      3
#define muse1_Config_accelerometer_data_enabled_tag 4
#define muse1_Config_battery_data_enabled_tag    5
#define muse1_Config_error_data_enabled_tag      6
#define muse1_Config_compression_enabled_tag     7
#define muse1_Config_eeg_sample_frequency_hz_tag 8
#define muse1_Config_eeg_output_frequency_hz_tag 9
#define muse1_Config_eeg_samples_bitwidth_tag    10
#define muse1_Config_eeg_channel_count_tag       11
#define muse1_Config_eeg_channel_layout_tag      12
#define muse1_Config_downsampling_tag            13
#define muse1_Config_output_mode_tag             14
#define muse1_Config_battery_percent_remaining_tag 15
#define muse1_Config_battery_millivolts_tag      16
#define muse1_Config_afe_gain_tag                17
#define muse1_Config_mac_addr_tag                18
#define muse1_Data_timestamp_tag                 1
#define muse1_Data_datatype_tag                  2
#define muse1_EEG_left_aux_tag                   1
#define muse1_EEG_left_ear_tag                   2
#define muse1_EEG_left_forehead_tag              3
#define muse1_EEG_right_forehead_tag             4
#define muse1_EEG_right_ear_tag                  5
#define muse1_EEG_right_aux_tag                  6
#define muse1_EEG_ref_tag                        7
#define muse1_EEG_drl_tag                        8
#define muse1_Quantization_left_aux_tag          1
#define muse1_Quantization_left_ear_tag          2
#define muse1_Quantization_left_forehead_tag     3
#define muse1_Quantization_right_forehead_tag    4
#define muse1_Quantization_right_ear_tag         5
#define muse1_Quantization_right_aux_tag         6
#define muse1_EEG_data_tag                       8
#define muse1_Quantization_data_tag              9
#define muse1_Accelerometer_data_tag             10
#define muse1_Annotation_data_tag                100
#define muse1_Battery_data_tag                   101
#define muse1_Version_data_tag                   102
#define muse1_Config_data_tag                    103

/* Struct field encoding specification for nanopb */
#define muse1_DataCollection_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  collection,        1)
#define muse1_DataCollection_CALLBACK pb_default_field_callback
#define muse1_DataCollection_DEFAULT NULL
#define muse1_DataCollection_collection_MSGTYPE muse1_Data

#define muse1_Data_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, DOUBLE,   timestamp,         1) \
X(a, STATIC,   REQUIRED, UENUM,    datatype,          2) \
X(a, CALLBACK, OPTIONAL, EXTENSION, extensions,        8)
#define muse1_Data_CALLBACK pb_default_field_callback
#define muse1_Data_DEFAULT NULL

#define muse1_EEG_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, SINT32,   left_aux,          1) \
X(a, STATIC,   OPTIONAL, SINT32,   left_ear,          2) \
X(a, STATIC,   OPTIONAL, SINT32,   left_forehead,     3) \
X(a, STATIC,   OPTIONAL, SINT32,   right_forehead,    4) \
X(a, STATIC,   OPTIONAL, SINT32,   right_ear,         5) \
X(a, STATIC,   OPTIONAL, SINT32,   right_aux,         6) \
X(a, STATIC,   OPTIONAL, SINT32,   ref,               7) \
X(a, STATIC,   OPTIONAL, SINT32,   drl,               8)
#define muse1_EEG_CALLBACK NULL
#define muse1_EEG_DEFAULT NULL

#define muse1_Quantization_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   left_aux,          1) \
X(a, STATIC,   OPTIONAL, UINT32,   left_ear,          2) \
X(a, STATIC,   OPTIONAL, UINT32,   left_forehead,     3) \
X(a, STATIC,   OPTIONAL, UINT32,   right_forehead,    4) \
X(a, STATIC,   OPTIONAL, UINT32,   right_ear,         5) \
X(a, STATIC,   OPTIONAL, UINT32,   right_aux,         6)
#define muse1_Quantization_CALLBACK NULL
#define muse1_Quantization_DEFAULT NULL

#define muse1_Accelerometer_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, SINT32,   acc1,              1) \
X(a, STATIC,   OPTIONAL, SINT32,   acc2,              2) \
X(a, STATIC,   OPTIONAL, SINT32,   acc3,              3)
#define muse1_Accelerometer_CALLBACK NULL
#define muse1_Accelerometer_DEFAULT NULL

#define muse1_Annotation_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   event_data,        1) \
X(a, STATIC,   OPTIONAL, UENUM,    event_data_format,   2) \
X(a, CALLBACK, OPTIONAL, STRING,   event_type,        3) \
X(a, CALLBACK, OPTIONAL, STRING,   event_id,          4) \
X(a, CALLBACK, OPTIONAL, STRING,   parent_id,         5)
#define muse1_Annotation_CALLBACK pb_default_field_callback
#define muse1_Annotation_DEFAULT NULL

#define muse1_Battery_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   percent_remaining,   1) \
X(a, STATIC,   OPTIONAL, UINT32,   battery_fuel_gauge_millivolts,   2) \
X(a, STATIC,   OPTIONAL, UINT32,   battery_adc_millivolts,   3) \
X(a, STATIC,   OPTIONAL, SINT32,   temperature_celsius,   4)
#define muse1_Battery_CALLBACK NULL
#define muse1_Battery_DEFAULT NULL

#define muse1_Version_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   hardware_version,   1) \
X(a, CALLBACK, OPTIONAL, STRING,   firmware_headset_version,   2) \
X(a, CALLBACK, OPTIONAL, STRING,   firmware_type,     3) \
X(a, CALLBACK, OPTIONAL, STRING,   firmware_bootloader_version,   4) \
X(a, CALLBACK, OPTIONAL, STRING,   build_number,      5) \
X(a, CALLBACK, OPTIONAL, STRING,   protocol_version,   6)
#define muse1_Version_CALLBACK pb_default_field_callback
#define muse1_Version_DEFAULT NULL

#define muse1_Config_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   preset,            1) \
X(a, STATIC,   OPTIONAL, BOOL,     filters_enabled,   2) \
X(a, STATIC,   OPTIONAL, UINT32,   notch_frequency_hz,   3) \
X(a, STATIC,   OPTIONAL, BOOL,     accelerometer_data_enabled,   4) \
X(a, STATIC,   OPTIONAL, BOOL,     battery_data_enabled,   5) \
X(a, STATIC,   OPTIONAL, BOOL,     error_data_enabled,   6) \
X(a, STATIC,   OPTIONAL, BOOL,     compression_enabled,   7) \
X(a, STATIC,   OPTIONAL, UINT32,   eeg_sample_frequency_hz,   8) \
X(a, STATIC,   OPTIONAL, UINT32,   eeg_output_frequency_hz,   9) \
X(a, STATIC,   OPTIONAL, UINT32,   eeg_samples_bitwidth,  10) \
X(a, STATIC,   OPTIONAL, UINT32,   eeg_channel_count,  11) \
X(a, CALLBACK, OPTIONAL, STRING,   eeg_channel_layout,  12) \
X(a, STATIC,   OPTIONAL, UINT32,   downsampling,     13) \
X(a, CALLBACK, OPTIONAL, STRING,   output_mode,      14) \
X(a, STATIC,   OPTIONAL, UINT32,   battery_percent_remaining,  15) \
X(a, STATIC,   OPTIONAL, UINT32,   battery_millivolts,  16) \
X(a, STATIC,   OPTIONAL, FLOAT,    afe_gain,         17) \
X(a, CALLBACK, OPTIONAL, STRING,   mac_addr,         18)
#define muse1_Config_CALLBACK pb_default_field_callback
#define muse1_Config_DEFAULT NULL

extern const pb_msgdesc_t muse1_DataCollection_msg;
extern const pb_msgdesc_t muse1_Data_msg;
extern const pb_msgdesc_t muse1_EEG_msg;
extern const pb_msgdesc_t muse1_Quantization_msg;
extern const pb_msgdesc_t muse1_Accelerometer_msg;
extern const pb_msgdesc_t muse1_Annotation_msg;
extern const pb_msgdesc_t muse1_Battery_msg;
extern const pb_msgdesc_t muse1_Version_msg;
extern const pb_msgdesc_t muse1_Config_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define muse1_DataCollection_fields &muse1_DataCollection_msg
#define muse1_Data_fields &muse1_Data_msg
#define muse1_EEG_fields &muse1_EEG_msg
#define muse1_Quantization_fields &muse1_Quantization_msg
#define muse1_Accelerometer_fields &muse1_Accelerometer_msg
#define muse1_Annotation_fields &muse1_Annotation_msg
#define muse1_Battery_fields &muse1_Battery_msg
#define muse1_Version_fields &muse1_Version_msg
#define muse1_Config_fields &muse1_Config_msg

/* Maximum encoded size of messages (where known) */
/* muse1_DataCollection_size depends on runtime parameters */
/* muse1_Annotation_size depends on runtime parameters */
/* muse1_Version_size depends on runtime parameters */
/* muse1_Config_size depends on runtime parameters */
#define muse1_Accelerometer_size                 18
#define muse1_Battery_size                       24
#define muse1_Data_size                          11
#define muse1_EEG_size                           48
#define muse1_Quantization_size                  36

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
