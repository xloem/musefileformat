/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: Muse_v2.proto */

#ifndef PROTOBUF_C_Muse_5fv2_2eproto__INCLUDED
#define PROTOBUF_C_Muse_5fv2_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1000002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _MuseDataCollection MuseDataCollection;
typedef struct _MuseData MuseData;
typedef struct _EEG EEG;
typedef struct _MuseQuantization MuseQuantization;
typedef struct _Accelerometer Accelerometer;
typedef struct _Annotation Annotation;
typedef struct _Battery Battery;
typedef struct _MuseVersion MuseVersion;
typedef struct _MuseConfig MuseConfig;
typedef struct _EEGDroppedSamples EEGDroppedSamples;
typedef struct _ACCDroppedSamples ACCDroppedSamples;
typedef struct _ComputingDevice ComputingDevice;
typedef struct _DSP DSP;


/* --- enums --- */

typedef enum _MuseData__Datatype {
  MUSE_DATA__DATATYPE__EEG = 0,
  MUSE_DATA__DATATYPE__QUANT = 1,
  MUSE_DATA__DATATYPE__ACCEL = 2,
  MUSE_DATA__DATATYPE__BATTERY = 3,
  MUSE_DATA__DATATYPE__VERSION = 4,
  MUSE_DATA__DATATYPE__CONFIG = 5,
  MUSE_DATA__DATATYPE__ANNOTATION = 6,
  MUSE_DATA__DATATYPE__HISTOGRAM = 7,
  MUSE_DATA__DATATYPE__ALGVALUE = 8,
  MUSE_DATA__DATATYPE__DSP = 9,
  MUSE_DATA__DATATYPE__COMPUTING_DEVICE = 10,
  MUSE_DATA__DATATYPE__EEG_DROPPED = 11,
  MUSE_DATA__DATATYPE__ACC_DROPPED = 12,
  MUSE_DATA__DATATYPE__CALM_APP = 13,
  MUSE_DATA__DATATYPE__CALM_ALG = 14
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MUSE_DATA__DATATYPE)
} MuseData__Datatype;
typedef enum _Annotation__Format {
  ANNOTATION__FORMAT__PLAIN_STRING = 0,
  ANNOTATION__FORMAT__JSON = 1,
  ANNOTATION__FORMAT__OSC = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ANNOTATION__FORMAT)
} Annotation__Format;
typedef enum _HeadLocations {
  HEAD_LOCATIONS__NZ = 1,
  HEAD_LOCATIONS__FP1 = 2,
  HEAD_LOCATIONS__FPZ = 3,
  HEAD_LOCATIONS__FP2 = 4,
  HEAD_LOCATIONS__AF7 = 5,
  HEAD_LOCATIONS__AF3 = 6,
  HEAD_LOCATIONS__AFZ = 7,
  HEAD_LOCATIONS__AF4 = 8,
  HEAD_LOCATIONS__AF8 = 9,
  HEAD_LOCATIONS__F9 = 10,
  HEAD_LOCATIONS__F7 = 11,
  HEAD_LOCATIONS__F5 = 12,
  HEAD_LOCATIONS__F3 = 13,
  HEAD_LOCATIONS__F1 = 14,
  HEAD_LOCATIONS__FZ = 15,
  HEAD_LOCATIONS__F2 = 16,
  HEAD_LOCATIONS__F4 = 17,
  HEAD_LOCATIONS__F6 = 18,
  HEAD_LOCATIONS__F8 = 19,
  HEAD_LOCATIONS__F10 = 20,
  HEAD_LOCATIONS__FT9 = 21,
  HEAD_LOCATIONS__FT7 = 22,
  HEAD_LOCATIONS__FC5 = 23,
  HEAD_LOCATIONS__FC3 = 24,
  HEAD_LOCATIONS__FC1 = 25,
  HEAD_LOCATIONS__FCZ = 26,
  HEAD_LOCATIONS__FC2 = 27,
  HEAD_LOCATIONS__FC4 = 28,
  HEAD_LOCATIONS__FC6 = 29,
  HEAD_LOCATIONS__FT8 = 30,
  HEAD_LOCATIONS__FT10 = 31,
  HEAD_LOCATIONS__A1 = 32,
  HEAD_LOCATIONS__T9 = 33,
  HEAD_LOCATIONS__T7 = 34,
  HEAD_LOCATIONS__C5 = 35,
  HEAD_LOCATIONS__C3 = 36,
  HEAD_LOCATIONS__C1 = 37,
  HEAD_LOCATIONS__CZ = 38,
  HEAD_LOCATIONS__C2 = 39,
  HEAD_LOCATIONS__C4 = 40,
  HEAD_LOCATIONS__C6 = 41,
  HEAD_LOCATIONS__T8 = 42,
  HEAD_LOCATIONS__T10 = 43,
  HEAD_LOCATIONS__A2 = 44,
  HEAD_LOCATIONS__TP9 = 45,
  HEAD_LOCATIONS__TP7 = 46,
  HEAD_LOCATIONS__CP5 = 47,
  HEAD_LOCATIONS__CP3 = 48,
  HEAD_LOCATIONS__CP1 = 49,
  HEAD_LOCATIONS__CPZ = 50,
  HEAD_LOCATIONS__CP2 = 51,
  HEAD_LOCATIONS__CP4 = 52,
  HEAD_LOCATIONS__CP6 = 53,
  HEAD_LOCATIONS__TP8 = 54,
  HEAD_LOCATIONS__TP10 = 55,
  HEAD_LOCATIONS__P9 = 56,
  HEAD_LOCATIONS__P7 = 57,
  HEAD_LOCATIONS__P5 = 58,
  HEAD_LOCATIONS__P3 = 59,
  HEAD_LOCATIONS__P1 = 60,
  HEAD_LOCATIONS__PZ = 61,
  HEAD_LOCATIONS__P2 = 62,
  HEAD_LOCATIONS__P4 = 63,
  HEAD_LOCATIONS__P6 = 64,
  HEAD_LOCATIONS__P8 = 65,
  HEAD_LOCATIONS__P10 = 66,
  HEAD_LOCATIONS__PO7 = 67,
  HEAD_LOCATIONS__PO3 = 68,
  HEAD_LOCATIONS__POZ = 69,
  HEAD_LOCATIONS__PO4 = 70,
  HEAD_LOCATIONS__PO8 = 71,
  HEAD_LOCATIONS__O1 = 72,
  HEAD_LOCATIONS__OZ = 73,
  HEAD_LOCATIONS__O2 = 74,
  HEAD_LOCATIONS__IZ = 75,
  HEAD_LOCATIONS__AUX1 = 76,
  HEAD_LOCATIONS__AUX2 = 77,
  HEAD_LOCATIONS__AUX3 = 78,
  HEAD_LOCATIONS__AUX4 = 79,
  HEAD_LOCATIONS__MUSE_LEFT_AUX = 80,
  HEAD_LOCATIONS__MUSE_RIGHT_AUX = 81
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(HEAD_LOCATIONS)
} HeadLocations;
typedef enum _EEGUnits {
  EEGUNITS__EEG_MICROVOLTS = 1,
  EEGUNITS__EEG_MUSE1_RAW = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(EEGUNITS)
} EEGUnits;
typedef enum _AccelerometerUnits {
  ACCELEROMETER_UNITS__ACC_GFORCE = 1,
  ACCELEROMETER_UNITS__ACC_MUSE1_RAW = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ACCELEROMETER_UNITS)
} AccelerometerUnits;

/* --- messages --- */

struct  _MuseDataCollection
{
  ProtobufCMessage base;
  size_t n_collection;
  MuseData **collection;
};
#define MUSE_DATA_COLLECTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&muse_data_collection__descriptor) \
    , 0,NULL }


struct  _MuseData
{
  ProtobufCMessage base;
  double timestamp;
  MuseData__Datatype datatype;
  protobuf_c_boolean has_config_id;
  uint64_t config_id;
};
#define MUSE_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&muse_data__descriptor) \
    , 0, 0, 0,0 }


struct  _EEG
{
  ProtobufCMessage base;
  size_t n_values;
  float *values;
  protobuf_c_boolean has_drl;
  float drl;
  protobuf_c_boolean has_ref;
  float ref;
};
#define EEG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&eeg__descriptor) \
    , 0,NULL, 0,0, 0,0 }


struct  _MuseQuantization
{
  ProtobufCMessage base;
  size_t n_values;
  uint32_t *values;
};
#define MUSE_QUANTIZATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&muse_quantization__descriptor) \
    , 0,NULL }


struct  _Accelerometer
{
  ProtobufCMessage base;
  protobuf_c_boolean has_acc1;
  float acc1;
  protobuf_c_boolean has_acc2;
  float acc2;
  protobuf_c_boolean has_acc3;
  float acc3;
};
#define ACCELEROMETER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&accelerometer__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _Annotation
{
  ProtobufCMessage base;
  char *event_data;
  protobuf_c_boolean has_event_data_format;
  Annotation__Format event_data_format;
  char *event_type;
  char *event_id;
  char *parent_id;
};
#define ANNOTATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&annotation__descriptor) \
    , NULL, 0,ANNOTATION__FORMAT__PLAIN_STRING, NULL, NULL, NULL }


struct  _Battery
{
  ProtobufCMessage base;
  protobuf_c_boolean has_percent_remaining;
  uint32_t percent_remaining;
  protobuf_c_boolean has_battery_fuel_gauge_millivolts;
  uint32_t battery_fuel_gauge_millivolts;
  protobuf_c_boolean has_battery_adc_millivolts;
  uint32_t battery_adc_millivolts;
  protobuf_c_boolean has_temperature_celsius;
  int32_t temperature_celsius;
};
#define BATTERY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&battery__descriptor) \
    , 0,0, 0,0, 0,0, 0,0 }


struct  _MuseVersion
{
  ProtobufCMessage base;
  char *hardware_version;
  char *firmware_headset_version;
  char *firmware_type;
  char *firmware_bootloader_version;
  char *build_number;
  char *protocol_version;
};
#define MUSE_VERSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&muse_version__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, NULL }


struct  _MuseConfig
{
  ProtobufCMessage base;
  char *mac_addr;
  char *serial_number;
  char *preset;
  protobuf_c_boolean has_compression_enabled;
  protobuf_c_boolean compression_enabled;
  protobuf_c_boolean has_filters_enabled;
  protobuf_c_boolean filters_enabled;
  protobuf_c_boolean has_notch_frequency_hz;
  uint32_t notch_frequency_hz;
  protobuf_c_boolean has_eeg_sample_frequency_hz;
  uint32_t eeg_sample_frequency_hz;
  protobuf_c_boolean has_eeg_output_frequency_hz;
  uint32_t eeg_output_frequency_hz;
  protobuf_c_boolean has_eeg_samples_bitwidth;
  uint32_t eeg_samples_bitwidth;
  protobuf_c_boolean has_eeg_channel_count;
  uint32_t eeg_channel_count;
  char *eeg_channel_layout;
  protobuf_c_boolean has_eeg_downsample;
  uint32_t eeg_downsample;
  protobuf_c_boolean has_eeg_units;
  EEGUnits eeg_units;
  size_t n_eeg_locations;
  HeadLocations *eeg_locations;
  protobuf_c_boolean has_eeg_conversion_factor;
  float eeg_conversion_factor;
  protobuf_c_boolean has_afe_gain;
  float afe_gain;
  protobuf_c_boolean has_drlref_data_enabled;
  protobuf_c_boolean drlref_data_enabled;
  protobuf_c_boolean has_drlref_conversion_factor;
  float drlref_conversion_factor;
  protobuf_c_boolean has_drlref_sample_frequency_hz;
  uint32_t drlref_sample_frequency_hz;
  protobuf_c_boolean has_acc_data_enabled;
  protobuf_c_boolean acc_data_enabled;
  protobuf_c_boolean has_acc_units;
  AccelerometerUnits acc_units;
  protobuf_c_boolean has_acc_conversion_factor;
  float acc_conversion_factor;
  protobuf_c_boolean has_acc_sample_frequency_hz;
  uint32_t acc_sample_frequency_hz;
  protobuf_c_boolean has_battery_data_enabled;
  protobuf_c_boolean battery_data_enabled;
  protobuf_c_boolean has_battery_percent_remaining;
  uint32_t battery_percent_remaining;
  protobuf_c_boolean has_battery_millivolts;
  uint32_t battery_millivolts;
  protobuf_c_boolean has_error_data_enabled;
  protobuf_c_boolean error_data_enabled;
};
#define MUSE_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&muse_config__descriptor) \
    , NULL, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, 0,0, 0,NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _EEGDroppedSamples
{
  ProtobufCMessage base;
  protobuf_c_boolean has_num;
  uint32_t num;
};
#define EEG__DROPPED_SAMPLES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&eeg__dropped_samples__descriptor) \
    , 0,0 }


struct  _ACCDroppedSamples
{
  ProtobufCMessage base;
  protobuf_c_boolean has_num;
  uint32_t num;
};
#define ACC__DROPPED_SAMPLES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&acc__dropped_samples__descriptor) \
    , 0,0 }


struct  _ComputingDevice
{
  ProtobufCMessage base;
  char *os_type;
  char *os_version;
  char *hardware_model_name;
  char *hardware_model_id;
  char *processor_name;
  char *processor_speed;
  protobuf_c_boolean has_number_of_processors;
  uint32_t number_of_processors;
  char *memory_size;
  char *bluetooth_version;
  char *time_zone;
  protobuf_c_boolean has_time_zone_offset_seconds;
  int32_t time_zone_offset_seconds;
};
#define COMPUTING_DEVICE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&computing_device__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, NULL, 0,0, NULL, NULL, NULL, 0,0 }


struct  _DSP
{
  ProtobufCMessage base;
  char *type;
  size_t n_float_array;
  float *float_array;
  size_t n_int_array;
  uint32_t *int_array;
  char *version;
};
#define DSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dsp__descriptor) \
    , NULL, 0,NULL, 0,NULL, NULL }


/* MuseDataCollection methods */
void   muse_data_collection__init
                     (MuseDataCollection         *message);
size_t muse_data_collection__get_packed_size
                     (const MuseDataCollection   *message);
size_t muse_data_collection__pack
                     (const MuseDataCollection   *message,
                      uint8_t             *out);
size_t muse_data_collection__pack_to_buffer
                     (const MuseDataCollection   *message,
                      ProtobufCBuffer     *buffer);
MuseDataCollection *
       muse_data_collection__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   muse_data_collection__free_unpacked
                     (MuseDataCollection *message,
                      ProtobufCAllocator *allocator);
/* MuseData methods */
void   muse_data__init
                     (MuseData         *message);
size_t muse_data__get_packed_size
                     (const MuseData   *message);
size_t muse_data__pack
                     (const MuseData   *message,
                      uint8_t             *out);
size_t muse_data__pack_to_buffer
                     (const MuseData   *message,
                      ProtobufCBuffer     *buffer);
MuseData *
       muse_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   muse_data__free_unpacked
                     (MuseData *message,
                      ProtobufCAllocator *allocator);
/* EEG methods */
void   eeg__init
                     (EEG         *message);
size_t eeg__get_packed_size
                     (const EEG   *message);
size_t eeg__pack
                     (const EEG   *message,
                      uint8_t             *out);
size_t eeg__pack_to_buffer
                     (const EEG   *message,
                      ProtobufCBuffer     *buffer);
EEG *
       eeg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   eeg__free_unpacked
                     (EEG *message,
                      ProtobufCAllocator *allocator);
/* MuseQuantization methods */
void   muse_quantization__init
                     (MuseQuantization         *message);
size_t muse_quantization__get_packed_size
                     (const MuseQuantization   *message);
size_t muse_quantization__pack
                     (const MuseQuantization   *message,
                      uint8_t             *out);
size_t muse_quantization__pack_to_buffer
                     (const MuseQuantization   *message,
                      ProtobufCBuffer     *buffer);
MuseQuantization *
       muse_quantization__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   muse_quantization__free_unpacked
                     (MuseQuantization *message,
                      ProtobufCAllocator *allocator);
/* Accelerometer methods */
void   accelerometer__init
                     (Accelerometer         *message);
size_t accelerometer__get_packed_size
                     (const Accelerometer   *message);
size_t accelerometer__pack
                     (const Accelerometer   *message,
                      uint8_t             *out);
size_t accelerometer__pack_to_buffer
                     (const Accelerometer   *message,
                      ProtobufCBuffer     *buffer);
Accelerometer *
       accelerometer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   accelerometer__free_unpacked
                     (Accelerometer *message,
                      ProtobufCAllocator *allocator);
/* Annotation methods */
void   annotation__init
                     (Annotation         *message);
size_t annotation__get_packed_size
                     (const Annotation   *message);
size_t annotation__pack
                     (const Annotation   *message,
                      uint8_t             *out);
size_t annotation__pack_to_buffer
                     (const Annotation   *message,
                      ProtobufCBuffer     *buffer);
Annotation *
       annotation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   annotation__free_unpacked
                     (Annotation *message,
                      ProtobufCAllocator *allocator);
/* Battery methods */
void   battery__init
                     (Battery         *message);
size_t battery__get_packed_size
                     (const Battery   *message);
size_t battery__pack
                     (const Battery   *message,
                      uint8_t             *out);
size_t battery__pack_to_buffer
                     (const Battery   *message,
                      ProtobufCBuffer     *buffer);
Battery *
       battery__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   battery__free_unpacked
                     (Battery *message,
                      ProtobufCAllocator *allocator);
/* MuseVersion methods */
void   muse_version__init
                     (MuseVersion         *message);
size_t muse_version__get_packed_size
                     (const MuseVersion   *message);
size_t muse_version__pack
                     (const MuseVersion   *message,
                      uint8_t             *out);
size_t muse_version__pack_to_buffer
                     (const MuseVersion   *message,
                      ProtobufCBuffer     *buffer);
MuseVersion *
       muse_version__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   muse_version__free_unpacked
                     (MuseVersion *message,
                      ProtobufCAllocator *allocator);
/* MuseConfig methods */
void   muse_config__init
                     (MuseConfig         *message);
size_t muse_config__get_packed_size
                     (const MuseConfig   *message);
size_t muse_config__pack
                     (const MuseConfig   *message,
                      uint8_t             *out);
size_t muse_config__pack_to_buffer
                     (const MuseConfig   *message,
                      ProtobufCBuffer     *buffer);
MuseConfig *
       muse_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   muse_config__free_unpacked
                     (MuseConfig *message,
                      ProtobufCAllocator *allocator);
/* EEGDroppedSamples methods */
void   eeg__dropped_samples__init
                     (EEGDroppedSamples         *message);
size_t eeg__dropped_samples__get_packed_size
                     (const EEGDroppedSamples   *message);
size_t eeg__dropped_samples__pack
                     (const EEGDroppedSamples   *message,
                      uint8_t             *out);
size_t eeg__dropped_samples__pack_to_buffer
                     (const EEGDroppedSamples   *message,
                      ProtobufCBuffer     *buffer);
EEGDroppedSamples *
       eeg__dropped_samples__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   eeg__dropped_samples__free_unpacked
                     (EEGDroppedSamples *message,
                      ProtobufCAllocator *allocator);
/* ACCDroppedSamples methods */
void   acc__dropped_samples__init
                     (ACCDroppedSamples         *message);
size_t acc__dropped_samples__get_packed_size
                     (const ACCDroppedSamples   *message);
size_t acc__dropped_samples__pack
                     (const ACCDroppedSamples   *message,
                      uint8_t             *out);
size_t acc__dropped_samples__pack_to_buffer
                     (const ACCDroppedSamples   *message,
                      ProtobufCBuffer     *buffer);
ACCDroppedSamples *
       acc__dropped_samples__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   acc__dropped_samples__free_unpacked
                     (ACCDroppedSamples *message,
                      ProtobufCAllocator *allocator);
/* ComputingDevice methods */
void   computing_device__init
                     (ComputingDevice         *message);
size_t computing_device__get_packed_size
                     (const ComputingDevice   *message);
size_t computing_device__pack
                     (const ComputingDevice   *message,
                      uint8_t             *out);
size_t computing_device__pack_to_buffer
                     (const ComputingDevice   *message,
                      ProtobufCBuffer     *buffer);
ComputingDevice *
       computing_device__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   computing_device__free_unpacked
                     (ComputingDevice *message,
                      ProtobufCAllocator *allocator);
/* DSP methods */
void   dsp__init
                     (DSP         *message);
size_t dsp__get_packed_size
                     (const DSP   *message);
size_t dsp__pack
                     (const DSP   *message,
                      uint8_t             *out);
size_t dsp__pack_to_buffer
                     (const DSP   *message,
                      ProtobufCBuffer     *buffer);
DSP *
       dsp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dsp__free_unpacked
                     (DSP *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*MuseDataCollection_Closure)
                 (const MuseDataCollection *message,
                  void *closure_data);
typedef void (*MuseData_Closure)
                 (const MuseData *message,
                  void *closure_data);
typedef void (*EEG_Closure)
                 (const EEG *message,
                  void *closure_data);
typedef void (*MuseQuantization_Closure)
                 (const MuseQuantization *message,
                  void *closure_data);
typedef void (*Accelerometer_Closure)
                 (const Accelerometer *message,
                  void *closure_data);
typedef void (*Annotation_Closure)
                 (const Annotation *message,
                  void *closure_data);
typedef void (*Battery_Closure)
                 (const Battery *message,
                  void *closure_data);
typedef void (*MuseVersion_Closure)
                 (const MuseVersion *message,
                  void *closure_data);
typedef void (*MuseConfig_Closure)
                 (const MuseConfig *message,
                  void *closure_data);
typedef void (*EEGDroppedSamples_Closure)
                 (const EEGDroppedSamples *message,
                  void *closure_data);
typedef void (*ACCDroppedSamples_Closure)
                 (const ACCDroppedSamples *message,
                  void *closure_data);
typedef void (*ComputingDevice_Closure)
                 (const ComputingDevice *message,
                  void *closure_data);
typedef void (*DSP_Closure)
                 (const DSP *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    head_locations__descriptor;
extern const ProtobufCEnumDescriptor    eegunits__descriptor;
extern const ProtobufCEnumDescriptor    accelerometer_units__descriptor;
extern const ProtobufCMessageDescriptor muse_data_collection__descriptor;
extern const ProtobufCMessageDescriptor muse_data__descriptor;
extern const ProtobufCEnumDescriptor    muse_data__datatype__descriptor;
extern const ProtobufCMessageDescriptor eeg__descriptor;
extern const ProtobufCMessageDescriptor muse_quantization__descriptor;
extern const ProtobufCMessageDescriptor accelerometer__descriptor;
extern const ProtobufCMessageDescriptor annotation__descriptor;
extern const ProtobufCEnumDescriptor    annotation__format__descriptor;
extern const ProtobufCMessageDescriptor battery__descriptor;
extern const ProtobufCMessageDescriptor muse_version__descriptor;
extern const ProtobufCMessageDescriptor muse_config__descriptor;
extern const ProtobufCMessageDescriptor eeg__dropped_samples__descriptor;
extern const ProtobufCMessageDescriptor acc__dropped_samples__descriptor;
extern const ProtobufCMessageDescriptor computing_device__descriptor;
extern const ProtobufCMessageDescriptor dsp__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_Muse_5fv2_2eproto__INCLUDED */
